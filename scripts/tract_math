#!/usr/bin/env python
import os
import sys
from warnings import warn

from argparse import ArgumentParser, FileType

def function_help_decorator(help_text):
    def internal_decorator(func):
        func.help_text = help_text
        return func
    return internal_decorator


def main():
    functions_list = {
        f[0]: f[1] for f in globals().items() if hasattr(f[1], 'help_text')
    }

    usage = r"""
    usage: %(prog)s <tract1.vtk> ... <tractN.vtk> operation <operation parameter1> ... <operation parameterN> <output_tract.vtk>

    Available operations:
    """
#        count: counts the number of tracts
#        mean_std_length: reports the mean and standard deviation of the tract length
#        scalars: print the names of scalar data associated with each tract
#        volume <resolution>: estimate the volume by counting the voxels traversed at a certain resolution in mm
#        map_image <image> <scalar name> <output tractography>: maps the values of an image to the tract points
#        generate_mask <image> <image_out>: generate a mask in the space of the image given as a parameter

    function_list_names = functions_list.keys()
    function_list_names.sort()
    for f in function_list_names:
        usage += '\t%s %s\n' % (f, functions_list[f].help_text)

    parser = ArgumentParser(usage=usage)
    parser.add_argument('tractographies', nargs=1, help='tractography files', type=FileType('r'))
    parser.add_argument('operation', type=str,
                        help="operation to use")
    parser.add_argument('operation_parameters', type=str, nargs="*",
                        help="operation to use")


    args = parser.parse_args()
    global tr, vtkInterface, numpy, nibabel
    from tract_querier.tractography import tractography as tr
    from tract_querier.tractography import vtkInterface
    import numpy
    import nibabel

    tractography = tr.tractography_from_vtk_files( [f.name for f in args.tractographies] )
    if  args.operation in functions_list:
        try:
            functions_list[args.operation](tractography, *args.operation_parameters)
        except TypeError:
            parser.error("Wrong number of parameters for the operation")
    else:
        parser.error("Operation not found")



@function_help_decorator(': counts the number of tracts')
def count(tractography):
    print len(tractography.getFibersToProcess())

@function_help_decorator(': print the names of scalar data associated with each tract')
def scalars(tractography):
    for k in tractography.getOriginalData().keys(): print k,' '

@function_help_decorator(': calculates mean and std of fiber length')
def length_mean_std(tractography):
    lengths = numpy.empty(len(tractography.getFibersToProcess()))

    for i, tract in enumerate(tractography.getFibersToProcess()):
        d2 = numpy.sqrt((numpy.diff(tract, 0) ** 2).sum(1))
        lengths[i] = d2.sum()

    mean = lengths.mean()
    std = lengths.std()

    print mean, std
    return mean, std

@function_help_decorator('<volume unit>: calculates the volume of a tract based on voxel occupancy of a certain voxel volume')
def volume(tractography, resolution):
    resolution = float(resolution)
    all_points = numpy.vstack(tractography.getFibersToProcess())

    all_points /= resolution
    all_points = (all_points - .5).round(0).astype(int)
    num_voxels = len( set((tuple(point) for point in all_points)) )

    print num_voxels * (resolution ** 3)
    return num_voxels * (resolution ** 3)

@function_help_decorator('<scalar>: calculates mean and std of a scalar quantity for each tract')
def scalar_tract_mean_std(tractography, scalar):
    try:
        tracts = tractography.getOriginalFibersData()[scalar]
        means = []
        stds = []
        for i, t in enumerate(tracts):
            means.append(t.mean().squeeze())
            stds.append(t.std().squeeze())
            print means[-1], stds[-1]

        return means, stds

    except KeyError:
        raise ValueError("Tractography does not contain this scalar data")

@function_help_decorator('<scalar>: calculates median of a scalar quantity for each tract')
def scalar_tract_median(tractography, scalar):
    try:
        tracts = tractography.getOriginalFibersData()[scalar]
        medians = []
        for i, t in enumerate(tracts):
            medians.append(numpy.median(t).squeeze())
            print medians[-1]

        return medians

    except KeyError:
        raise ValueError("Tractography does not contain this scalar data")


@function_help_decorator('<scalar>: calculates mean and std of a scalar quantity over tracts')
def scalar_mean_std(tractography, scalar):
    try:
        scalars = tractography.getOriginalData()[scalar]
        all_scalars = numpy.vstack(scalars)
        mean = all_scalars.mean(0)
        std = all_scalars.std(0)

        print mean.squeeze(), std.squeeze()
        return mean, std

    except KeyError:
        raise ValueError("Tractography does not contain this scalar data")

@function_help_decorator('<scalar>: calculates median of a scalar quantity over tracts')
def scalar_median(tractography, scalar):
    try:
        scalars = tractography.getOriginalData()[scalar]
        all_scalars = numpy.vstack(scalars)
        median = numpy.median(all_scalars)

        print median
        return median

    except KeyError:
        raise ValueError("Tractography does not contain this scalar data")


@function_help_decorator('<image> <quantity_name> <tractography_file_output>: maps the values of an image to the tract points')
def tract_map_image(tractography, image, quantity_name, tractography_file_output):
    from os import path
    from scipy import ndimage

    image = nibabel.load(image)

    ijk_points = tract_in_ijk(image, tractography)
    image_data = image.get_data()

    if image_data.ndim > 3:
        output_name, ext = path.splitext(tractography_file_output)
        output_name = output_name + '_%04d' + ext
        for i, image in enumerate(image_data):
            new_scalar_data = ndimage.map_coordinates( image.T, ijk_points.T )[:, None]
            tractography.getOriginalFibersData()[quantity_name] = new_scalar_data
            vtkInterface.writeLinesToVtkPolyData(output_name % i, tractography.getOriginalFibers(),  tractography.getOriginalFibersData())
    else:
        new_scalar_data = ndimage.map_coordinates( image_data.T, ijk_points.T )[:, None]
        tractography.getOriginalFibersData()[quantity_name] = new_scalar_data
        vtkInterface.writeLinesToVtkPolyData(
            tractography_file_output, tractography.getOriginalFibers(),  tractography.getOriginalFibersData()
        )

@function_help_decorator('<image> <mask_out>: calculates the mask image from a tract on the space of the given image')
def image_generate_mask(tractography, image, image_out):
    image = nibabel.load(image)

    ijk_points = tract_in_ijk(image, tractography)
    image_data = image.get_data()

    ijk_clipped = ijk_points.clip((0,0,0), image_data.shape).astype(int)

    mask = numpy.empty_like(image_data, dtype=float)
    mask[tuple(ijk_clipped.T)] = 1

    nibabel.save(nibabel.spatialimages.SpatialImage(mask, image.get_affine()), image_out)


@function_help_decorator('<var> <tract_out>: smoothes the tract by convolving with a sliding window')
def tract_smooth(tractography, var, tractography_file_output):
    print('*' * 80 + "\nWarning: Still at work, should use the mahalanobis distance instead of the L2 distance\n" + '*' * 80)
    from sklearn.neighbors import BallTree

    var = float(var)
    std = var ** 2

    points = tractography.getOriginalFibers()

    N = max(100, 2 * len(points) / 3)

    norm_term = 1. / (numpy.sqrt(2 * numpy.pi) * std)
    for i, tract in enumerate(tractography.getOriginalFibers()):
        all_points = numpy.vstack(points[:i] + points[i + 1:])
        bt = BallTree(all_points)

        close_point_distances, close_point_indices = bt.query(
            tract, N
        )

        weights = numpy.exp(
            -.5 * close_point_distances ** 2 / std
        )[..., None]
        norm_term = (weights).sum(1) + 1
        weighted_points = (all_points[close_point_indices] * weights).sum(1)
        tract += weighted_points
        tract /= norm_term

    vtkInterface.writeLinesToVtkPolyData(
        tractography_file_output, tractography.getOriginalFibers(),  tractography.getOriginalFibersData()
    )


def tract_in_ijk(image, tractography):
    ras_points = numpy.vstack(tractography.getFibersToProcess())
    ijk_points = numpy.dot( numpy.linalg.inv(image.get_affine()), numpy.hstack((
          ras_points,
          numpy.ones((len(ras_points), 1))
                  )).T).T[:,:-1]
    return ijk_points


if __name__ == "__main__":
    main()
    sys.exit()





