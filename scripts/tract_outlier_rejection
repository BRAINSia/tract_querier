#!/usr/bin/env python -O
from optparse import OptionParser
import tract_querier



def main():
    parser = OptionParser(version=0.1, usage = "usage: %prog -t tractography_file -z z_score -o result")
    parser.add_option("-t", "--tractography", dest="tractography_file_name",
                    help="name of the tractography file")
    parser.add_option('-o', "--output", dest="output_file_name",
                    help="clustering output file prefix")
    parser.add_option('-z', '--zscore_threshold', dest='zscore_threshold', default=3,
                    help="Outlier rejection threshold default %default %")
    parser.add_option('-u', '--subsample_fibers', dest='subsample_fibers',
                    help="subsample fibers")

    (options, args) = parser.parse_args()

    if not options.tractography_file_name or\
       not options.output_file_name:
        parser.error("incorrect number of arguments")

    options.zscore_threshold = float(options.zscore_threshold)

    from tractographyGP import tractography

    print "Loading files"

    tr = tractography.tractography_from_vtk_files(
        options.tractography_file_name
    )

    if options.subsample_fibers is not None:
        tr.subsample_tracts(int(options.subsample_fibers))

    save_tractography_file(
        options.output_file_name,
        tr,
        zscore_threshold=float(options.zscore_threshold)
    )

def save_tractography_file(filename, tractography, zscore_threshold=3):
    from tractographyGP import vtkInterface
    from itertools import izip
    import numpy as np

    fiber_numbers = np.arange(len(tractography.original_tracts()))
    print "Number of fibers to process: ", len(fiber_numbers)

    fibers_to_process = tractography.tracts_to_process()
    original_fibers = tractography.original_tracts()

    fiber_numbers_to_save, zscore_per_fiber = tract_querier.z_score_outlier_rejection(fibers_to_process, z_score_reject=zscore_threshold)
    zscore_per_fiber.sort()
    fiber_numbers = [ fiber_numbers[i] for i in fiber_numbers_to_save]
    fibers_to_save = [ original_fibers[i] for i in fiber_numbers]
    print '\t', len(fiber_numbers_to_save)

    if len(fibers_to_save) == 0:
        return

    fibers_data_to_save = {}
    for key, data in tractography.original_tracts_data().items():
        fibers_data_to_save[key] = [data[f] for f in fiber_numbers]

    if 'ActiveTensors' not in fibers_data_to_save and 'Tensors_' in fibers_data_to_save:
        fibers_data_to_save['ActiveTensors'] = 'Tensors_'
    if 'ActiveVectors' not in fibers_data_to_save and 'Vectors_' in fibers_data_to_save:
        fibers_data_to_save['ActiveVectors'] = 'Vectors_'

    z_scores_fiber_data = [np.repeat(z_score, len(fiber))[:, None] for z_score, fiber in izip(zscore_per_fiber, fibers_to_save)]
    fibers_data_to_save['z_score'] = z_scores_fiber_data

    vtkInterface.writeLinesToVtkPolyData(
        filename,
        fibers_to_save,
        fibers_data_to_save
    )



if __name__ == "__main__":
    main()
